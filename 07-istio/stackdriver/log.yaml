---
apiVersion: "config.istio.io/v1alpha2"
kind: stackdriver
metadata:
  name: log-handler
  namespace: istio-system
spec:
  pushInterval: 10s
  logInfo:
    server-accesslog-stackdriver.logentry.istio-system:
      labelNames:
      - source_uid
      - source_ip
      - source_app
      - source_principal
      - source_name
      - source_workload
      - source_namespace
      - source_owner
      - destination_uid
      - destination_app
      - destination_ip
      - destination_service_host
      - destination_workload
      - destination_name
      - destination_namespace
      - destination_owner
      - destination_principal
      - api_name
      - api_version
      - api_claims
      - api_key
      - request_operation
      - protocol
      - method
      - url
      - response_code
      - response_size
      - request_size
      - request_id
      - client_trace_id
      - latency
      - service_authentication_policy
      - user_agent
      - response_timestamp
      - received_bytes
      - sent_bytes
      - referer
    server-tcp-accesslog-stackdriver.logentry.istio-system:
      labelNames:
      - connection_id
      - connection_event
      - source_uid
      - source_ip
      - source_app
      - source_principal
      - source_name
      - source_workload
      - source_namespace
      - source_owner
      - destination_uid
      - destination_app
      - destination_ip
      - destination_service_host
      - destination_workload
      - destination_name
      - destination_namespace
      - destination_owner
      - destination_principal
      - protocol
      - connction_duration
      - service_authentication_policy
      - received_bytes
      - sent_bytes
      - total_received_bytes
      - total_sent_bytes
---
#################################################
############## Logging Config ###################
#################################################
apiVersion: "config.istio.io/v1alpha2"
kind: logentry
metadata:
  name: server-accesslog-stackdriver
  namespace: istio-system
spec:
  severity: '"Info"'
  timestamp: request.time
  variables:
    source_uid: source.uid | ""
    source_ip: source.ip | ip("0.0.0.0")
    source_app: source.labels["app"] | ""
    source_principal: source.principal | ""
    source_name: source.name | ""
    source_workload: source.workload.name | ""
    source_namespace: source.namespace | ""
    source_owner: source.owner | ""
    destination_uid: destination.uid | ""
    destination_app: destination.labels["app"] | ""
    destination_ip: destination.ip | ip("0.0.0.0")
    destination_service_host: destination.service.host | ""
    destination_workload: destination.workload.name | ""
    destination_name: destination.name | ""
    destination_namespace: destination.namespace | ""
    destination_owner: destination.owner | ""
    destination_principal: destination.principal | ""
    api_name: api.service | ""
    api_version: api.version | ""
    api_claims: request.auth.raw_claims | ""
    api_key: request.api_key | request.headers["x-api-key"] | ""
    request_operation: conditional((context.protocol | "unknown") == "grpc", request.path | "unknown", request.method | "unknown")
    protocol: request.scheme | context.protocol | "http"
    method: request.method | ""
    url: request.path | ""
    response_code: response.code | 0
    response_size: response.size | 0
    request_size: request.size | 0
    request_id: request.headers["x-request-id"] | ""
    client_trace_id: request.headers["x-client-trace-id"] | ""
    latency: response.duration | "0ms"
    service_authentication_policy: conditional((context.reporter.kind | "inbound") == "outbound", "unknown", conditional(connection.mtls | false, "mutual_tls", "none"))
    user_agent: request.useragent | ""
    response_timestamp: response.time
    received_bytes: request.total_size | 0
    sent_bytes: response.total_size | 0
    referer: request.referer | ""
  monitored_resource_type: '"k8s_container"'
  monitoredResourceDimensions:
    project_id: '"inspired-bus-194216"'
    cluster_name: '"standard-cluster-1"'
    namespace_name: destination.namespace | "unknown"
    location: '"us-central1-a"'
    container_name: conditional((destination.name | "unknown").startsWith("istio-telemetry") || (destination.name | "unknown").startsWith("istio-policy"), "mixer", destination.container.name | "unknown")
    pod_name: destination.name | "unknown"
---
apiVersion: "config.istio.io/v1alpha2"
kind: logentry
metadata:
  name: server-tcp-accesslog-stackdriver
  namespace: istio-system
spec:
  severity: '"Info"'
  timestamp: context.time | timestamp("2017-01-01T00:00:00Z")
  variables:
    connection_id: connection.id | ""
    connection_event: connection.event | ""
    source_uid: source.uid | ""
    source_ip: source.ip | ip("0.0.0.0")
    source_app: source.labels["app"] | ""
    source_principal: source.principal | ""
    source_name: source.name | ""
    source_workload: source.workload.name | ""
    source_namespace: source.namespace | ""
    source_owner: source.owner | ""
    destination_uid: destination.uid | ""
    destination_app: destination.labels["app"] | ""
    destination_ip: destination.ip | ip("0.0.0.0")
    destination_service_host: destination.service.host | ""
    destination_workload: destination.workload.name | ""
    destination_name: destination.name | ""
    destination_namespace: destination.namespace | ""
    destination_owner: destination.owner | ""
    destination_principal: destination.principal | ""
    protocol: context.protocol | "tcp"
    connction_duration: connection.duration | "0ms"
    service_authentication_policy: conditional((context.reporter.kind | "inbound") == "outbound", "unknown", conditional(connection.mtls | false, "mutual_tls", "none"))
    received_bytes: connection.received.bytes | 0
    sent_bytes: connection.sent.bytes | 0
    total_received_bytes: connection.received.bytes_total | 0
    total_sent_bytes: connection.sent.bytes_total | 0
  monitored_resource_type: '"k8s_container"'
  monitoredResourceDimensions:
    project_id: '"inspired-bus-194216"'
    cluster_name: '"standard-cluster-1"'
    namespace_name: destination.namespace | "unknown"
    location: '"us-central1-a"'
    container_name: conditional((destination.name | "unknown").startsWith("istio-telemetry") || (destination.name | "unknown").startsWith("istio-policy"), "mixer", destination.container.name | "unknown")
    pod_name: destination.name | "unknown"
---
apiVersion: "config.istio.io/v1alpha2"
kind: rule
metadata:
  name: stackdriver-log
  namespace: istio-system
spec:
  match: (context.protocol == "http" || context.protocol == "grpc") && (context.reporter.kind | "inbound" == "inbound")
  actions:
  - handler: log-handler.stackdriver
    instances:
    - server-accesslog-stackdriver.logentry
---
apiVersion: "config.istio.io/v1alpha2"
kind: rule
metadata:
  name: stackdriver-log-tcp
  namespace: istio-system
spec:
  match: (context.protocol == "tcp") && (context.reporter.kind | "inbound" == "inbound")
  actions:
  - handler: log-handler.stackdriver
    instances:
    - server-tcp-accesslog-stackdriver.logentry
---
